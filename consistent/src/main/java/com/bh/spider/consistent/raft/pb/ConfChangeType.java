// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: raft.proto

package com.bh.spider.consistent.raft.pb;

/**
 * Protobuf enum {@code com.bh.spider.consistent.raft.pb.ConfChangeType}
 */
public enum ConfChangeType
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <code>ConfChangeAddNode = 0;</code>
   */
  ConfChangeAddNode(0),
  /**
   * <code>ConfChangeRemoveNode = 1;</code>
   */
  ConfChangeRemoveNode(1),
  /**
   * <code>ConfChangeUpdateNode = 2;</code>
   */
  ConfChangeUpdateNode(2),
  /**
   * <code>ConfChangeAddLearnerNode = 3;</code>
   */
  ConfChangeAddLearnerNode(3),
  UNRECOGNIZED(-1),
  ;

  /**
   * <code>ConfChangeAddNode = 0;</code>
   */
  public static final int ConfChangeAddNode_VALUE = 0;
  /**
   * <code>ConfChangeRemoveNode = 1;</code>
   */
  public static final int ConfChangeRemoveNode_VALUE = 1;
  /**
   * <code>ConfChangeUpdateNode = 2;</code>
   */
  public static final int ConfChangeUpdateNode_VALUE = 2;
  /**
   * <code>ConfChangeAddLearnerNode = 3;</code>
   */
  public static final int ConfChangeAddLearnerNode_VALUE = 3;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static ConfChangeType valueOf(int value) {
    return forNumber(value);
  }

  public static ConfChangeType forNumber(int value) {
    switch (value) {
      case 0: return ConfChangeAddNode;
      case 1: return ConfChangeRemoveNode;
      case 2: return ConfChangeUpdateNode;
      case 3: return ConfChangeAddLearnerNode;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<ConfChangeType>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      ConfChangeType> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<ConfChangeType>() {
          public ConfChangeType findValueByNumber(int number) {
            return ConfChangeType.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return com.bh.spider.consistent.raft.pb.RaftProto.getDescriptor().getEnumTypes().get(1);
  }

  private static final ConfChangeType[] VALUES = values();

  public static ConfChangeType valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private ConfChangeType(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:com.bh.spider.consistent.raft.pb.ConfChangeType)
}

